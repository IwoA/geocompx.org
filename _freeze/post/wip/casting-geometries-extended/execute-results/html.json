{
  "hash": "eb62a01849c7aaa75fba95cb7babc4c5",
  "result": {
    "markdown": "---\ntitle: 'Casting Geometries: Extended'\nauthor: Robin Lovelace, Jakub Nowosad, Jannes Muenchow\ndate: '2019-08-07'\nslug: casting-geometries-extended\ncategories:\n  - vignette\ntags:\n  - geocompr\n  - rspatial\n  - sf\n  - type transformation\ndraft: true\npublishDate: 2019-09-16\n---\n\n\n\n\nThis vignette provides some further detail on the Type transformations section (see https://geocompr.robinlovelace.net/geometric-operations.html#type-trans ) of [the Geocomputation with R book](https://geocompr.github.io/).\n\n# Attach libraries\n\nThis vignette requires the following packages to be installed and attached:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n\n# Create a set of sfg objects\n\nThe code below creates a set of simple feature geometries (`sfg`) objects that are used as examples:\n\n- `pts_sfg` - POINT\n- `mpts_sfg` - MULTIPOINT\n- `line_sfg` - LINESTRING\n- `mline_sfg` - MULTILINESTRING\n- `poly_sfg` - POLYGON\n- `mpoly_sfg` - MULTIPOLYGON\n- `geoc_sfg` - GEOMETRYCOLLECTION\n\nAdditionally, the `sfgs` object - a list containing all of the above objects is created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts_sfg = st_point(c(5, 2))\n\nmultipoint_matrix = rbind(c(5, 2), c(1, 3), c(3, 4), c(3, 2))\nmpts_sfg = st_multipoint(multipoint_matrix)\n\nlinestring_matrix = rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2))\nline_sfg = st_linestring(linestring_matrix)\n\nmultilinestring_list = list(rbind(c(1, 5), c(4, 4), c(4, 1), c(2, 2), c(3, 2)), \n                            rbind(c(1, 2), c(2, 4)))\nmline_sfg = st_multilinestring((multilinestring_list))\n\npolygon_list = list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5)))\npoly_sfg = st_polygon(polygon_list)\n\nmultipolygon_list = list(list(rbind(c(1, 5), c(2, 2), c(4, 1), c(4, 4), c(1, 5))),\n                         list(rbind(c(0, 2), c(1, 2), c(1, 3), c(0, 3), c(0, 2))))\nmpoly_sfg = st_multipolygon(multipolygon_list)\n\ngemetrycollection_list = list(st_multipoint(multipoint_matrix),\n                              st_linestring(linestring_matrix))\ngeoc_sfg = st_geometrycollection(gemetrycollection_list)\n\nsfgs = list(pts_sfg = pts_sfg, mpts_sfg = mpts_sfg,\n            line_sfg = line_sfg, mline_sfg = mline_sfg, \n            poly_sfg = poly_sfg, mpoly_sfg = mpoly_sfg,\n            geoc_sfg = geoc_sfg)\n```\n:::\n\n\n# Create a set of sfc objects\n\nNext, all of the objects created above are converted to the simple feature columns (`sfc`) class objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npts_sfc = st_sfc(pts_sfg)\nmpts_sfc = st_sfc(mpts_sfg)\nline_sfc = st_sfc(line_sfg)\nmline_sfc = st_sfc((mline_sfg))\npoly_sfc = st_sfc(poly_sfg)\nmpoly_sfc = st_sfc(mpoly_sfg)\ngeoc_sfc = st_sfc(geoc_sfg)\n\nsfcs = list(pts_sfc = pts_sfc, mpts_sfc = mpts_sfc,\n            line_sfc = line_sfc, mline_sfc = mline_sfc, \n            poly_sfc = poly_sfc, mpoly_sfc = mpoly_sfc,\n            geoc_sfc = geoc_sfc)\n```\n:::\n\n\n# Create a set of sf objects\n\nAll of the `sfg` objects are also converted to the simple feature (`sf`) class objects:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df = data.frame(col = \"a\")\npts_sf = st_sf(my_df, pts_sfc)\nmpts_sf = st_sf(my_df, mpts_sfc)\nline_sf = st_sf(my_df, geom = line_sfc)\nmline_sf = st_sf(my_df, geom = mline_sfc)\npoly_sf = st_sf(my_df, geom = poly_sfc)\nmpoly_sf = st_sf(my_df, geom = mpoly_sfc)\ngeoc_sf = st_sf(my_df, geom = geoc_sfc)\n\nsfs = list(pts_sf = pts_sf, mpts_sf = mpts_sf,\n           line_sf = line_sf, mline_sf = mline_sf, \n           poly_sf = poly_sf, mpoly_sf = mpoly_sf,\n           geoc_sf = geoc_sf)\n```\n:::\n\n\n# Plot example objects\n\nExample object can be quickly plotted using the `plot()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(3, 3))\npar(mar = c(3, 3, 1, 0))\nplot(pts_sfc, axes = TRUE, main = \"POINT\")\nplot(mpts_sfc, axes = TRUE, main = \"MULTIPOINT\")\nplot(line_sfc, axes = TRUE, main = \"LINESTRING\")\nplot(mline_sfc, axes = TRUE, main = \"MULTILINESTRING\")\nplot(poly_sfc, axes = TRUE, main = \"POLYGON\")\nplot(mpoly_sfc, axes = TRUE, main = \"MULTIPOLYGON\")\nplot(geoc_sfc, axes = TRUE, main = \"GEOMETRYCOLLECTION\")\n```\n\n::: {.cell-output-display}\n![](casting-geometries-extended_files/figure-html/unnamed-chunk-5-1.png){width=480}\n:::\n:::\n\n\n# Create st_cast() summary functions\n\nA new set of st_cast() summary functions is created below:\n\n- `st_type()` - returns a type of the input object, either `\"sfg\"`, `\"sfc\"`, `\"sf\"`, or `NA`\n- `st_geometry_type()` - returns a geometry type of the input object, for example `MULTIPOLYGON`.\nIt returns `NULL` when the geometry type cannot be identified\n- `unique_s()` - returns `NA` when the input is `NULL`, and unique values otherwise\n- `st_caster()` - it is the main function, based on all the previous ones. \nIts returns a tibble showing what is an output when casting an input object to all of the possible geometry types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_type = function(x){\n  if (all(is.na(x))){\n    return(NA)\n  } \n  x_class = class(x)\n  if (\"sfg\" %in% x_class){\n    return(\"sfg\")\n  } else if (\"sfc\" %in% x_class){\n    return(\"sfc\")\n  } else if (\"sf\" %in% x_class){\n    return(\"sf\")\n  }\n}\nst_geometry_type_s = function(x){\n  if (is.null(x)){\n    return(NULL)\n  } else {\n    return(as.character(st_geometry_type(x)))\n  }\n}\nunique_s = function(x) {\n  ifelse(is.null(x), \"NA\", unique(x))\n}\nst_caster = function(x){\n  st_cast_s = possibly(st_cast, NULL)\n  geometries_df = data_frame(to = c(\"POINT\", \"MULTIPOINT\", \n                                    \"LINESTRING\", \"MULTILINESTRING\",\n                                    \"POLYGON\", \"MULTIPOLYGON\",\n                                    \"GEOMETRYCOLLECTION\"))\n  \n  geo_df = geometries_df %>% \n    mutate(result = map(to, st_cast_s, x = x)) %>% \n    mutate(result_geom = map(result, st_geometry_type_s)) %>% \n    mutate(result_geom_length = map_int(result_geom, length)) %>% \n    mutate(result_geom = map_chr(result_geom, unique_s)) %>% \n    mutate(result_type = map_chr(result, st_type)) %>% \n    mutate(input = list(x)) %>% \n    mutate(input_geom = st_geometry_type_s(x)) %>% \n    mutate(input_geom_length = map_int(input_geom, length)) %>% \n    mutate(input_geom = map_chr(input_geom, unique_s)) %>% \n    mutate(input_type = st_type(x)) %>% \n    mutate(input_geom = paste0(input_geom, \"(\", input_geom_length, \")\"),\n           result_geom = paste0(result_geom, \"(\", result_geom_length, \")\")) %>% \n    dplyr::select(input_geom, to, result_geom_length) %>% \n    mutate(result_geom_length = if_else(result_geom_length == 0, NA_integer_, result_geom_length)) %>% \n    spread(to, result_geom_length)\n  \n  geo_df\n}\n```\n:::\n\n\n# Prepare summary tables\n\nNow, the example data is used as an input to the `st_caster()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsfgs_st_cast = sfgs %>% map_dfr(st_caster)\nsfcs_st_cast = sfcs %>% map_dfr(st_caster)\nsfs_st_cast = sfs %>% map_dfr(st_caster)\n```\n:::\n\n\n# Summary tables\n\nFinally, the summary tables are created, showing what happens when you cast geometry to another type for `sfg`, `sfc`, and `sf` objects.\n\n## sfg\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Geometry casting on simple feature geometries with input type by row and output type by column. Values like (1) represent the number of features; NA means the operation is not possible.\n\n|input_geom            | POINT| MULTIPOINT| LINESTRING| MULTILINESTRING| POLYGON| MULTIPOLYGON| GEOMETRYCOLLECTION|\n|:---------------------|-----:|----------:|----------:|---------------:|-------:|------------:|------------------:|\n|POINT(1)              |     1|          1|         NA|              NA|      NA|           NA|                  1|\n|MULTIPOINT(1)         |     1|          1|          1|               1|       1|            1|                  1|\n|LINESTRING(1)         |     1|          1|          1|               1|       1|            1|                  1|\n|MULTILINESTRING(1)    |     1|          1|          1|               1|      NA|           NA|                  1|\n|POLYGON(1)            |     1|          1|          1|               1|       1|            1|                  1|\n|MULTIPOLYGON(1)       |     1|          1|          1|               1|       1|            1|                  1|\n|GEOMETRYCOLLECTION(1) |     1|          1|          1|               1|       1|            1|                  1|\n:::\n:::\n\n\n## sfc\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Geometry casting on simple feature geometry list columns with input type by row and output type by column. Values like (1) represent the number of features; NA means the operation is not possible.\n\n|input_geom            | POINT| MULTIPOINT| LINESTRING| MULTILINESTRING| POLYGON| MULTIPOLYGON| GEOMETRYCOLLECTION|\n|:---------------------|-----:|----------:|----------:|---------------:|-------:|------------:|------------------:|\n|POINT(1)              |     1|          1|          1|              NA|      NA|           NA|                 NA|\n|MULTIPOINT(1)         |     4|          1|          1|               1|       1|           NA|                 NA|\n|LINESTRING(1)         |     5|          1|          1|               1|       1|           NA|                 NA|\n|MULTILINESTRING(1)    |     7|          2|          2|               1|      NA|           NA|                 NA|\n|POLYGON(1)            |     5|          1|          1|               1|       1|            1|                 NA|\n|MULTIPOLYGON(1)       |    10|          1|         NA|               1|       2|            1|                  1|\n|GEOMETRYCOLLECTION(1) |     9|          1|         NA|              NA|      NA|           NA|                  1|\n:::\n:::\n\n\n## sf\n\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Geometry casting on simple features with input type by row and output type by column. Values like (1) represent the number of features; NA means the operation is not possible.\n\n|input_geom            | POINT| MULTIPOINT| LINESTRING| MULTILINESTRING| POLYGON| MULTIPOLYGON| GEOMETRYCOLLECTION|\n|:---------------------|-----:|----------:|----------:|---------------:|-------:|------------:|------------------:|\n|POINT(1)              |     1|          1|          1|              NA|      NA|           NA|                 NA|\n|MULTIPOINT(1)         |     4|          1|          1|               1|       1|           NA|                 NA|\n|LINESTRING(1)         |     5|          1|          1|               1|       1|           NA|                 NA|\n|MULTILINESTRING(1)    |     7|          2|          2|               1|      NA|           NA|                 NA|\n|POLYGON(1)            |     5|          1|          1|               1|       1|            1|                 NA|\n|MULTIPOLYGON(1)       |    10|          1|         NA|               1|       2|            1|                  1|\n|GEOMETRYCOLLECTION(1) |     9|          1|         NA|              NA|      NA|           NA|                  1|\n:::\n:::\n\n\n",
    "supporting": [
      "casting-geometries-extended_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}