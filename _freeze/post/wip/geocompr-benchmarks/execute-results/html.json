{
  "hash": "894a9829f714a6bf99e22500e498a5ed",
  "result": {
    "markdown": "---\ntitle: 'Geocomputation benchmarks'\nauthor: Robin Lovelace, Jakub Nowosad, Jannes Muenchow\ndate: '2019-08-07'\nslug: geocompr-benchmarks\ncategories:\n  - vignette\ntags:\n  - geocompr\n  - rspatial\n  - sf\n  - benchmarks\ndraft: true\n---\n\n::: {.cell}\n\n:::\n\n\n## Datasets used\n\nThe following filepaths datasets will be used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf1 = system.file(\"shapes/world.gpkg\", package = \"spData\")\nf2 = \"promenade-all.geojson\"\n```\n:::\n\n\nTo run, this article relies on downloading files onto your computer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(data.table))\nsuppressPackageStartupMessages(library(sf))\nf2 = \"promenade-all.geojson\"\nu = \"https://github.com/spnethack/spnethack/releases/download/0.1/promenade-all.geojson\"\nif(!file.exists(f2)) download.file(u, destfile = f2)\n\nsystem.time({b = read_sf(f2)})\nsystem.time({d = b  %>% data.table::as.data.table()})\nsystem.time(d[,geometry:=sf::st_as_text(geometry),])\nsystem.time(d %>% readr::write_tsv(\"tmp.tsv\"))\n```\n:::\n\n\n# Reading vector data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nvector_filepath = system.file(\"shapes/world.gpkg\", package = \"spData\")\nworld = st_read(vector_filepath)\n```\n:::\n\n\nTo demonstrate this, we will use a function to compare `st_read()` with its **sp** equivalent, `rgdal::readOGR()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb1 = bench::mark(iterations = 3, check = FALSE,\n            sf = st_read(vector_filepath),\n            sp = rgdal::readOGR(vector_filepath)\n)\nb1\n```\n:::\n\n\nThe benchmark ran on an input file (`file`) and a number of times.\nIt shows that **sf** was  times faster than **rgdal** at loading this file.\n\nThe relative performance of `st_read()` compared with other functions will vary depending on file format and the nature of the data.\nTo illustrate this point, we performed the same operation on a geojson file and found a greater speed saving:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector_filepath = system.file(\"shapes/cycle_hire_osm.geojson\", package = \"spData\")\nb2 = bench::mark(iterations = 3, check = FALSE,\n            sf = st_read(vector_filepath),\n            sp = rgdal::readOGR(vector_filepath)\n)\nb2\n```\n:::\n\n\nIn this case **sf** was around  times faster than **rgdal**.\n\n# Writing vector data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rgdal)\nworld_sp = as(world, \"Spatial\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.time(writeOGR(world_sp, dsn = \"world_sp.geojson\", layer = \"world_sp.geojson\", driver = \"GeoJSON\"))\nsystem.time(writeOGR(world_sp, dsn = \".\", layer = \"world_sp\", driver = \"ESRI Shapefile\")) \nsystem.time(writeOGR(world_sp, dsn = \"world_sp.gpkg\", layer = \"world_sp.gpkg\", driver = \"GPKG\"))\nsystem.time(st_write(world, \"world_sf.geojson\", quiet = TRUE))\nsystem.time(st_write(world, \"world_sf.shp\", quiet = TRUE)) \nsystem.time(st_write(world, \"world_sf.gpkg\", quiet = TRUE))\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}