{
  "hash": "ee03d0e2da8f44a9f0e84f5bce1cc3d4",
  "result": {
    "markdown": "---\ntitle: \"Conversions between different spatial classes in R\"\nauthor: Jakub Nowosad\ndate: \"2021-06-17\"\nslug: spatial-classes-conversion\ncategories: [vignette]\ntags: [geocompr, sf, sp, stars, raster, terra, sabre, tmap, rstats]\ndraft: false\nbibliography: refs.bib\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe R programming language has, over the past two decades, evolved substantial spatial data analysis capabilities, and is now one of the most powerful environments for undertaking geographic research using a reproducible command line interface.\nCurrently, dedicated R packages allow to read spatial data and apply a plethora of different kinds of spatial methods in a reproducible fashion.\n\nThere are two main^[There are also other spatial data models, including meshes or point clouds.] spatial data models - spatial vector data and spatial raster data.\nNatively R does not support spatial data and does not have a definition of spatial classes.\nTherefore, there had been [a need to create R tools able to represent spatial vector and raster data ](https://geocompr.robinlovelace.net/intro.html#the-history-of-r-spatial).\nSpatial classes are slightly different from regular R objects, such as data frames or matrices, as they need to not only store values, but also information about spatial locations and their [coordinate reference systems](https://geocompr.robinlovelace.net/spatial-class.html#crs-intro).\n\nNowadays, the most prominent packages to represent spatial vector data are **sf** [@R-sf] and its predecessor **sp** [@R-sp], however, the **terra** [@R-terra] package also has its own spatial class for vector data.\nSpatial raster data can be stored as objects from **terra** [@R-terra] and its predecessor **raster** [@R-raster], or alternatively the **stars** package [@R-stars].\n\nAs you could see in [our Why R? webinar talk](/post/2020/whyr_webinar004/), the spatial capabilities of R constantly expand, but also evolve.\nNew packages are being developed, while old ones are modified or superseded.\nIn this process, new methods are created, higher performance code is added, and possible workflows are expanded.\nAlternative approaches allow for a (hopefully) healthy competition, resulting in better packages.\nOf course, having more than one package (with its own spatial class/es) for a vector or raster data model could be problematic, especially for new or inexperienced users.\n\nFirst, it takes time to understand how different spatial classes are organized.\nTo illustrate this, let's read the same spatial data, `srtm.tif` from the **spDataLarge** package [@R-spDataLarge], using **raster** and **stars**.\nThe **raster** object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraster_file_path = system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\nlibrary(raster)\nsrtm_raster = raster(raster_file_path)\nsrtm_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass      : RasterLayer \ndimensions : 457, 465, 212505  (nrow, ncol, ncell)\nresolution : 0.0008333333, 0.0008333333  (x, y)\nextent     : -113.2396, -112.8521, 37.13208, 37.51292  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : srtm.tif \nnames      : srtm \nvalues     : 1024, 2892  (min, max)\n```\n:::\n:::\n\n\nThe **stars** object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stars)\nsrtm_stars = read_stars(raster_file_path)\nsrtm_stars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n          Min. 1st Qu. Median     Mean 3rd Qu. Max.\nsrtm.tif  1024    1535   1837 1842.548    2114 2892\ndimension(s):\n  from  to  offset        delta refsys point x/y\nx    1 465 -113.24  0.000833333 WGS 84 FALSE [x]\ny    1 457 37.5129 -0.000833333 WGS 84 FALSE [y]\n```\n:::\n:::\n\n\nSecondly, other packages with methods we want to use, could only accept one specific spatial class, but not the other.\nFor example, the current version of the **sabre** package [@R-sabre] (0.3.2) accepts objects from the **raster** package, but not ones from **terra** or **stars**^[I plan to improve that in a future release.].\nThe `partitions1` and `partitions2` objects are of the `RasterLayer` class from **raster**, so the `vmeasure_calc()` function works correctly.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sabre)\nlibrary(raster)\ndata(\"partitions1\")\ndata(\"partitions2\")\nvmeasure_calc(partitions1, partitions2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe SABRE results:\n\n V-measure: 0.36 \n Homogeneity: 0.32 \n Completeness: 0.42 \n\n The spatial objects can be retrieved with:\n $map1 - the first map\n $map2 - the second map \n```\n:::\n:::\n\n\nHowever, when the input object (representing the same spatial data!) is of the `SpatRaster` class from **terra**, the calculation results in error.\n\n```\nvmeasure_calc(partitions1_terra, partitions1_terra)\n```\n\n```\n## Error in UseMethod(\"vmeasure_calc\") : \n##  no applicable method for 'vmeasure_calc' applied to an object of class \"SpatRaster\"\n```\n\nSome packages, such as **tmap** [@R-tmap], accept many R spatial classes, however, this takes a lot of effort from package creators to make it possible and to maintain it.\nGladly, a number of functions exist that allow to convert between different R spatial classes.\nUsing them, we can work with our favorite spatial data representation, switch to some other representation just for a certain calculation, and then convert the result back into our class.\nThe next two sections showcase how to move between different spatial vector and raster data classes in R.\n\n## Spatial vector data\n\nThe `world.gpkg` file from the **spData** [@R-spData] contains spatial vector data with world countries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld_path = system.file(\"shapes/world.gpkg\", package = \"spData\")\n```\n:::\n\n\nNow, we can read this file, for example, as an `sf` object, and convert it into other spatial vector data classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(sp)\nlibrary(terra)\n\n# read as sf\nworld = read_sf(world_path)\n\n# sf to sp\nworld_sp1 = as(world, \"Spatial\")\n\n# sf to terra vect\nworld_terra1 = vect(world)\n\n# sp to terra vect\nworld_terra2 = vect(world_sp1)\n\n# sp to sf\nworld_sf2 = st_as_sf(world_sp1)\n\n# terra vect to sf\nworld_sf3 = st_as_sf(world_terra1)\n\n# terra vect to sp\nworld_sp2 = as(world_terra1, \"Spatial\")\n```\n:::\n\n\nIn summary, `st_as_sf()` converts other classes into `sf`, `vect()` transform other classes into **terra**'s `SpatVector`, and with `as(x, \"Spatial\")` it is possible to get **sp**'s vectors.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> FROM/TO </th>\n   <th style=\"text-align:left;\"> sf </th>\n   <th style=\"text-align:left;\"> sp </th>\n   <th style=\"text-align:left;\"> terra </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;border-right:1px solid;font-weight: bold;\"> sf </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\">  </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> as(x, \"Spatial\") </td>\n   <td style=\"text-align:left;font-style: italic;\"> vect() </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;border-right:1px solid;font-weight: bold;\"> sp </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> st_as_sf() </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\">  </td>\n   <td style=\"text-align:left;font-style: italic;\"> vect() </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;border-right:1px solid;font-weight: bold;\"> terra </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> st_as_sf() </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> as(x, \"Spatial\") </td>\n   <td style=\"text-align:left;font-style: italic;\">  </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Spatial raster data\n\nThe `srtm.tif` file from the **spDataLarge** [@R-spDataLarge] contains a raster elevation model for the Zion National Park in the USA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsrtm_path = system.file(\"raster/srtm.tif\", package = \"spDataLarge\")\n```\n:::\n\n\nNow, we can read this file, for example, as a **raster** object, and convert it into other spatial vector data classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(raster)\nlibrary(stars)\nlibrary(terra)\n\nsrtm_raster1 = raster(srtm_path)\n\n# raster to terra\nsrtm_terra1 = rast(srtm_raster1)\n\n# terra to raster\nsrtm_raster2 = raster(srtm_terra1)\n\n# raster to stars\nsrtm_stars1 = st_as_stars(srtm_raster1)\n\n# stars to raster\nsrtm_raster2 = as(srtm_stars1, \"Raster\")\n\n# terra to stars\nsrtm_stars2 = st_as_stars(srtm_terra1)\n\n# stars to terra\nsrtm_terra1a = as(srtm_stars1, \"SpatRaster\")\n```\n:::\n\n\nAs you can see - in most cases, we can just use one function to move from one class to another.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> FROM/TO </th>\n   <th style=\"text-align:left;\"> raster </th>\n   <th style=\"text-align:left;\"> terra </th>\n   <th style=\"text-align:left;\"> stars </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;border-right:1px solid;font-weight: bold;\"> raster </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\">  </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> rast() </td>\n   <td style=\"text-align:left;font-style: italic;\"> st_as_stars() </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;border-right:1px solid;font-weight: bold;\"> terra </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> raster() </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\">  </td>\n   <td style=\"text-align:left;font-style: italic;\"> st_as_stars() </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;border-right:1px solid;font-weight: bold;\"> stars </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> raster() </td>\n   <td style=\"text-align:left;border-right:1px solid;font-style: italic;\"> as(x, \"SpatRaster\") </td>\n   <td style=\"text-align:left;font-style: italic;\">  </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Summary\n\nThis blog post summarizes how to move between different R spatial vector and raster classes.\nAll of the functions mentioned above have one role: to change classes of input objects. \nThey do not, however, change geometries or underlining values in the data.\n\nAdditionally, switching from the spatial vector data model to the spatial raster data model (and vice versa) is also possible. \nThese operations are known as rasterization and vectorization, and they could impact spatial and nonspatial information in the input data.\nTo learn more about them, read [the Raster-Vector Interactions section](https://geocompr.robinlovelace.net/geometric-operations.html#raster-vector) in [Geocomputation with R](https://geocompr.robinlovelace.net/).\n\n## References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}