{
  "hash": "a81931e26d50aa411bc2ff307fc7212c",
  "result": {
    "markdown": "---\ntitle: 'Inset maps with ggplot2'\nauthor: Jakub Nowosad\ndate: '2019-12-08'\ncategories:\n  - vignette\ntags:\n  - geocompr\n  - rspatial\n  - ggplot2\n  - maps\n  - viz\ndraft: false\n---\n\n\n\n\nInset maps enable multiple places to be shown in the same geographic data visualisation, as described in the [Inset maps section (8.2.7)](https://geocompr.robinlovelace.net/adv-map.html#inset-maps) of our open source book Geocomputation with R.\nThe topic of inset maps has gained attention and recently [Enrico Spinielli](https://twitter.com/espinielli/) [asked inset maps could be created for data in unusual coordinate](systemshttps://twitter.com/espinielli/status/1191452410394361863).\n\nR's flexibility allows inset maps to be created in various ways, using different approaches and packages.\nHowever, the main idea stays the same: we need to create at least two maps: a larger one, called the main map, that shows the central story and a smaller one, called the inset map, that puts the main map in context.\n\nThis blog post shows how to create inset maps with **ggplot2** for visualization.\nThe approach also uses the **sf** package for spatial data reading and handling, **cowplot** to arrange inset maps, and **rcartocolor** for additional color palettes.\nTo reproduce the results on your own computer, after installing them, these packages can be attached as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(rcartocolor)\n```\n:::\n\n\n# Basic inset map\n\nLet's start by creating a basic inset map.\n\n## Data preparation\n\nThe first step is to read and prepare the data we want to visualize. \nWe use the `us_states` data from the **spData** package as the source of the inset map, and `north_carolina` from the **sf** package as the source of the main map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spData)\ndata(\"us_states\", package = \"spData\")\nnorth_carolina = read_sf(system.file(\"shape/nc.shp\", package = \"sf\"))\n```\n:::\n\n\nBoth objects should have the same coordinate reference system (`crs`).\nHere, we use `crs = 2163`, which represents the US National Atlas Equal Area projection. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states_2163 = st_transform(us_states, crs = 2163)\nnorth_carolina_2163 = st_transform(north_carolina, crs = 2163)\n```\n:::\n\n\nWe also need to have the borders of the area we want to highlight (use in the main map).\nThis can be done by extracting the bounding box of our `north_carolina_2163` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnorth_carolina_2163_bb = st_as_sfc(st_bbox(north_carolina_2163))\n```\n:::\n\n\n## Maps creation\n\nThe second step is to create both inset and main maps independently. \nThe inset map should show the context (larger area) and highlight the area of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggm1 = ggplot() + \n  geom_sf(data = us_states_2163, fill = \"white\") + \n  geom_sf(data = north_carolina_2163_bb, fill = NA, color = \"red\", size = 1.2) +\n  theme_void()\n\nggm1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=768}\n:::\n:::\n\n\nThe main map's role is to tell the story. \nHere we show the number of births between 1974 and 1978 in the North Carolina counties (the `BIR74` variable) using the Mint color palette from the **rcartocolor** palette.\nWe also customize the legend position and size - this way, the legend is a part of the map, instead of being somewhere outside the map frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggm2 = ggplot() + \n  geom_sf(data = north_carolina_2163, aes(fill = BIR74)) +\n  scale_fill_carto_c(palette = \"Mint\") +\n  theme_void() +\n  theme(legend.position = c(0.4, 0.05),\n        legend.direction = \"horizontal\",\n        legend.key.width = unit(10, \"mm\"))\n\nggm2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=768}\n:::\n:::\n\n\n## Maps joining\n\nThe final step is to join two maps.\nThis can be done using functions from the **cowplot** package.\nWe create an empty ggplot layer using `ggdraw()`, fill it with out main map (`draw_plot(ggm2)`), and add an inset map by specifing its position and size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_inset_map1 = ggdraw() +\n  draw_plot(ggm2) +\n  draw_plot(ggm1, x = 0.05, y = 0.65, width = 0.3, height = 0.3)\n\ngg_inset_map1\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\nThe final map can be saved using the `ggsave()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"01_gg_inset_map.png\", \n       plot = gg_inset_map1,\n       width = 8, \n       height = 4,\n       dpi = 150)\n```\n:::\n\n\n# Advanced inset map\n\nLet's expand the idea of the inset map in **ggplot2** based on the previous example.\n\n## Data preparation\n\nThis map will use the US states borders (`states()`) as the source of the inset map and the Kentucky Senate legislative districts (`state_legislative_districts()`) as the main map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tigris)\noptions(tigris_use_cache = TRUE)\nus_states = states(cb = FALSE, class = \"sf\")\nky_districts = state_legislative_districts(\"KY\", house = \"upper\",\n                                           cb = FALSE, class = \"sf\")\n```\n:::\n\n\nThe `states()` function, in addition to the 50 states, also returns the District of Columbia, Puerto Rico, American Samoa, the Commonwealth of the Northern Mariana Islands, Guam, and the US Virgin Islands.\nFor our purpose, we are interested in the continental 48 states and the District of Columbia only; therefore, we remove the rest of the divisions using `subset()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_states = subset(us_states, \n                   !NAME %in% c(\n                     \"United States Virgin Islands\",\n                     \"Commonwealth of the Northern Mariana Islands\",\n                     \"Guam\",\n                     \"American Samoa\",\n                     \"Puerto Rico\",\n                     \"Alaska\",\n                     \"Hawaii\"\n                   ))\n```\n:::\n\n\nThe same as in the example above, we transform both objects to have the same projection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nky_districts_2163 = st_transform(ky_districts, crs = 2163)\nus_states_2163 = st_transform(us_states, crs = 2163)\n```\n:::\n\n\nWe also extract the bounding box of the main object here.\nHowever, instead of using it directly, we add a buffer of 10,000 meters around it.\nThis output will be handy in both inset and main maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nky_districts_2163_bb = st_as_sfc(st_bbox(ky_districts_2163))\nky_districts_2163_bb = st_buffer(ky_districts_2163_bb, dist = 10000)\n```\n:::\n\n\nThe `ky_districts_2163` object does not have any interesting variables to visualize, so we create some random values here.\nHowever, we could also join the districts' data with another dataset in this step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nky_districts_2163$values = runif(nrow(ky_districts_2163))\n```\n:::\n\n\n## Map creation\n\nThe inset map should be as clear and simple as possible. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggm3 = ggplot() + \n  geom_sf(data = us_states_2163, fill = \"white\", size = 0.2) + \n  geom_sf(data = ky_districts_2163_bb, fill = NA, color = \"blue\", size = 1.2) +\n  theme_void()\n\nggm3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\nOn the other hand, the main map looks better when we provide some additional context to our data.\nOne of the ways to achieve it is to add the borders of the neighboring states.\n\nImportantly, we also need to limit the extent of our main map to the range of the frame in the inset map.\nThis can be done with the `coord_sf()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggm4 = ggplot() + \n  geom_sf(data = us_states_2163, fill = \"#F5F5DC\") +\n  geom_sf(data = ky_districts_2163, aes(fill = values)) +\n  scale_fill_carto_c(palette = \"Sunset\") +\n  theme_void() +\n  theme(legend.position = c(0.5, 0.07),\n        legend.direction = \"horizontal\",\n        legend.key.width = unit(10, \"mm\"),\n        plot.background = element_rect(fill = \"#BFD5E3\")) +\n  coord_sf(xlim = st_bbox(ky_districts_2163_bb)[c(1, 3)],\n           ylim = st_bbox(ky_districts_2163_bb)[c(2, 4)])\n\nggm4\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=768}\n:::\n:::\n\n\nFinally, we draw two maps together, trying to find the best location and size for the inset map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_inset_map2 = ggdraw() +\n  draw_plot(ggm4) +\n  draw_plot(ggm3, x = 0.02, y = 0.65, width = 0.35, height = 0.35)\n\ngg_inset_map2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\nThe final map can be saved using the `ggsave()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(filename = \"02_gg_inset_map.png\", \n       plot = gg_inset_map2,\n       width = 7.05, \n       height = 4,\n       dpi = 150)\n```\n:::\n\n\n# Summary\n\nThe above examples can be adjusted to any spatial data and location.\nIt is also possible to put more context on the map, including adding main cities' names, neighboring states' names, and annotations (using `geom_text()`, `geom_label()`).\nThe main map can also be enhanced with the north arrow and scale bar using the [**ggsn**](https://github.com/oswaldosantos/ggsn) package.\n\nAs always with R, there are many possible options to create inset maps.\nYou can find two examples of inset maps created using the **tmap** package in [the Geocomputation with R book](https://geocompr.robinlovelace.net/adv-map.html#inset-maps). \nThe second example is a classic map of the United States, which consists of the contiguous United States, Hawaii, and Alaska. \nHowever, Hawaii and Alaska are displayed at different geographic scales than the main map there.\nThis problem can also be solved in R, which you can see in [the Making maps of the USA with R: alternative layout](https://nowosad.github.io/post/making-alternative-inset-maps-of-the-usa/) blogpost and the [Alternative layout for maps of the United States](https://github.com/Nowosad/us-map-alternative-layout) repository.\n\nThe presented approaches also apply to other areas. \nFor example, you can find three ways on how to create an inset map of Spain in the [Alternative layout for maps of Spain](https://github.com/Nowosad/spain-map-layout) repository.\nOther examples of inset maps with **ggplot2** can be found in the [Inset Maps](https://ryanpeek.github.io/mapping-in-R-workshop/vig_making_inset_maps.html) vignette by [Ryan Peek](https://twitter.com/riverpeek) and the blog post [Drawing beautiful maps programmatically with R, sf and ggplot2](https://www.r-spatial.org/r/2018/10/25/ggplot2-sf-3.html) by [Mel Moreno](https://twitter.com/melimore86) and [Mathieu Basille](https://twitter.com/MabLabUF).\n\nThe decision which option to use depends on the expected map type preferred R packages, etc.\nTry different approaches on your own data and decide what works best for you!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}