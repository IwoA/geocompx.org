{
  "hash": "ea4d0a8efe53c966882cba15fa5e8f81",
  "result": {
    "markdown": "---\ntitle: 'Grids and graticules in the tmap package'\nauthor: Jakub Nowosad\ndate: '2019-09-04'\ncategories:\n  - vignette\ntags:\n  - geocompr\n  - rspatial\n  - tmap\n  - maps\n  - viz\ndraft: false\n---\n\n\n\n\nThis vignette builds on the [making maps chapter](https://geocompr.robinlovelace.net/adv-map.html) of [the Geocomputation with R book](https://geocompr.github.io/).\nIts goal is to demonstrate how to set and modify grids and graticules in the **tmap** package.\n\n## Prerequisites {-}\n\nThe examples below assume the following packages are attached:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spData) # example datasets\nlibrary(tmap)   # map creation (>=2.3)\nlibrary(sf)     # spatial data classes\n```\n:::\n\n\n# Grids and graticules\n\nThe **tmap** package offers two ways to draws coordinate lines - `tm_grid()` and `tm_graticules()`.\nThe role of `tm_grid()` is to represent the input data's coordinates.\nFor example, the `nz` object uses the New Zealand Transverse Mercator projection, with meters as its units.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) + \n  tm_polygons() +\n  tm_grid()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\n`tm_graticules()` shows longitude lines (meridians) and latitude lines (parallels), with degrees as units (note the degree sign in the example below).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) + \n  tm_polygons() +\n  tm_graticules()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=576}\n:::\n:::\n\n\n# Layers order\n\nBoth, `tm_grid()` and `tm_graticules()` could be placed above or below the main spatial data.\nIts position on the map depends on its place in the code.\nWhen `tm_grid()` or `tm_graticules()` are placed after the code drawing geometry (e.g. `tm_polygons()`), the grids or graticules are ploted on the top of the map.\nOn the other hand, when `tm_grid()` or `tm_graticules()` are placed before the code drawing geometry (e.g. `tm_polygons()`), the grids or graticules are plotted behind the spatial data.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) +\n  tm_graticules() + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=576}\n:::\n:::\n\n\n# Customization\n\nGrids and graticules can be easily customized in **tmap** using several arguments.\nThe first one, `labels.inside.frame` moves the labels inside the map grid (it is set to `FALSE` as the default).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) +\n  tm_grid(labels.inside.frame = TRUE) + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=576}\n:::\n:::\n\n\nThe number of horizontal (`x`) and vertical (`y`) lines can be set using the `n.x` and `n.y` arguments.\nImportantly, **tmap** rounds coordinate values to equally spaced \"round\" values, so the number of actual labels may be slightly different than set with `n.x` and `n.y`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) +\n  tm_grid(n.x = 4, n.y = 3) + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=576}\n:::\n:::\n\n\nBy default, `tm_grid()` and `tm_graticules()` shows ticks and lines. \nThey can be disabled using `ticks = FALSE` and `lines = FALSE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) +\n  tm_grid(ticks = FALSE) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=576}\n:::\n:::\n\n\nEspecially, `lines = FALSE` could be useful when presenting raster data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) +\n  tm_grid(lines = FALSE) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=576}\n:::\n:::\n\n\nIt is also possible to customize `tm_grid()` and `tm_graticules()` apperance, for example by chaning the lines colors (`col`), width (`lwd`) or labels size (`labels.size`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(nz) +\n  tm_grid(col = \"red\", lwd = 3, labels.size = 0.4) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=576}\n:::\n:::\n\n\nThe above examples uses `tm_grid()`, but the same arguments apply to the `tm_graticules()`.\n\n# Layout settings\n\nBy default, **tmap** adds small inner margins between the presented data and the map frame. \nIt works well in many cases, for example, see the map of New Zealand above.\nHowever, it does not look perfect for world maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(world) + \n  tm_graticules() + \n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=576}\n:::\n:::\n\n\nThe way to fix this is to use the `tm_layout()` function and set its `inner.margins` argument to `0`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(world) + \n  tm_graticules() + \n  tm_polygons() +\n  tm_layout(inner.margins = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=576}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}